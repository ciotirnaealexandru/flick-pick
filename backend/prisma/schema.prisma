// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  GUEST
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  phone     String?
  password  String
  role      Role    @default(USER)

  userShows UserShow[]
  deck      Deck[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Show {
  // database id
  id Int @id @default(autoincrement())

  // id within the API database (from which i can retrieve the show info)
  apiId     Int    @unique
  name      String
  imageUrl  String
  summary   String @db.Text
  premiered String

  userShows UserShow[]
  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserShow {
  id Int @id @default(autoincrement())

  userRating Int?
  reviews    Review[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  show   Show @relation(fields: [showId], references: [id])
  showId Int

  deck   Deck @relation(fields: [deckId], references: [id])
  deckId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, showId])
}

model Deck {
  id Int @id @default(autoincrement())

  name      String
  userShows UserShow[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}

model Review {
  id      Int    @id @default(autoincrement())
  content String

  userShow   UserShow @relation(fields: [userShowId], references: [id])
  userShowId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  show   Show @relation(fields: [showId], references: [id])
  showId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
