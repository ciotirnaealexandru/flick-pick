name: Flick Pick Deployment

on:
  push:
    branches: ["prod"]

jobs:
  deploy-be:
    runs-on: ubuntu-latest

    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_AUTH_KEY: ${{ secrets.JWT_AUTH_KEY }}
      SHOW_API_READ_ACCESS_TOKEN: ${{ secrets.SHOW_API_READ_ACCESS_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate

      - name: Apply Prisma migrations
        working-directory: ./backend
        run: npx prisma migrate deploy

      - name: Deploy Backend to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: $HEROKU_API_KEY
          heroku_app_name: flick-pick-backend
          heroku_email: ciotirnae.alexandru005@gmail.com
          usedocker: false
          branch: prod
          path: backend

  deploy-fe:
    runs-on: ubuntu-latest

    needs: deploy-be

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
      DISPLAY_SKIP_BUTTON: ${{ secrets.DISPLAY_SKIP_BUTTON }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('frontend/pubspec.lock') }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.3"
          channel: "stable"

      - name: Enable web support
        working-directory: ./frontend
        run: flutter config --enable-web

      - name: Get dependencies
        working-directory: ./frontend
        run: flutter pub get

      - name: Ensure .env exists for assets
        run: |
          mkdir -p frontend
          if [ ! -f frontend/.env ]; then
            printf "Dummy .env because flutter throws an error if it's not in assets.\n" > frontend/.env
          fi

      - name: Build Flutter Web
        working-directory: ./frontend
        run: |
          flutter build web --release \
          --dart-define=BACKEND_API_URL=$BACKEND_API_URL \
          --dart-define=DISPLAY_SKIP_BUTTON=$DISPLAY_SKIP_BUTTON \
          --no-wasm-dry-run

      - name: Deploy to Vercel
        run: |
          npm install --global vercel
          vercel --prod --yes --cwd frontend/build/web --token=${{ secrets.VERCEL_TOKEN }}
